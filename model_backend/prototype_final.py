# -*- coding: utf-8 -*-
"""prototype_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13g_pB6lL0zIlJu6sYFuD8TLoS7PDSAX2
"""

!pip install -U git+https://github.com/huggingface/diffusers
!pip install transformers
!pip install -q gradio

from torch import autocast
import requests
import torch
from PIL import Image
from io import BytesIO

from diffusers import StableDiffusionImg2ImgPipeline

# load the pipeline
device = "cuda"
model_id_or_path = "CompVis/stable-diffusion-v1-4"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    model_id_or_path,
    revision="fp16", 
    torch_dtype=torch.float16,
    use_auth_token='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'
)
# or download via git clone https://huggingface.co/CompVis/stable-diffusion-v1-4
# and pass `model_id_or_path="./stable-diffusion-v1-4"` without having to use `use_auth_token=True`.
pipe = pipe.to(device)

def diffuse(x, param):
  print('in callback')
  x = Image.fromarray(np.uint8(x))
  init_image = x.resize((768, 512))
  prompt = 'st petersburg logo'
  if param == 'Эрмитаж':
    prompt = "st petersburg logo Winter Palace image on background vector style"
  elif param == 'Казанский собор':
    prompt = "Kazan Cathedral image vector style logo black blue white"
  elif param == 'Мосты':
    prompt = 'st petersburg logo bridges image on background beautiful high quality'

  with autocast("cuda"):
      images = pipe(prompt=prompt, init_image=init_image, strength=0.75, guidance_scale=7.5).images
  return [images[0], param]

# craft - text detection
# тексты поэм в инпут модельке
# принты на мерче

import numpy as np
import gradio as gr

def flip_image(x, param):
    return [np.fliplr(x), 'функция приняла на вход ' + param]

with gr.Blocks() as demo:
    
    gr.Markdown("Слово 'Санкт-Петербург'")
    with gr.Tab("Санкт-Петербург"):
        with gr.Row():
            image_input = gr.Image()
            param_input = gr.Radio(["Эрмитаж", "Мосты", "Казанский собор"], label='Что для тебя Санкт-Петербург?')
            image_output = gr.Image()
            param_out = gr.Markdown()
        image_button = gr.Button("Сгенерировать")

    image_button.click(diffuse, [image_input, param_input], [image_output, param_out])

demo.launch(debug=True)

init_img

init_image = Image.open('/content/drive/MyDrive/HACK_ITMO/cut_images/IMG_9359.jpg')

diffuse(init_image, 'ads')



import cv2
des_size = (256, 256)
img = cv2.imread("/content/drive/MyDrive/HACK_ITMO/cut_thresh/tr_128.jpg")
border_v = 0
border_h = 0
if 1 >= (img.shape[0]/img.shape[1]):
    border_v = int(((img.shape[1])-img.shape[0])/2)
else:
    border_h = int(((img.shape[0])-img.shape[1])/2)
img = cv2.copyMakeBorder(img, border_v, border_v, border_h, border_h, cv2.BORDER_CONSTANT, value=(255,255,255))
img = cv2.resize(img, des_size)
plt.imshow(img)
plt.plot()

border_v = 0
border_h = 0
if 1 >= (img.shape[0]/img.shape[1]):
    border_v = int(((img.shape[1])-img.shape[0])/2)
else:
    border_h = int(((img.shape[0])-img.shape[1])/2)
img = cv2.copyMakeBorder(img, border_v, border_v, border_h, border_h, cv2.BORDER_CONSTANT, value=(255,255,255))
img = cv2.resize(img, des_size)



